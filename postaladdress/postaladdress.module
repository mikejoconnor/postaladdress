<?php

/**
 * Implementation of hook_field_info()
 */
function postaladdress_field_info() {
  $fields = array();

  $fields['postaladdress'] = array(
    'label' => t('Postal Address'),
    'description' => t('A field type used for storing postal addresses according the oXal standard.'),
    'default_widget' => 'postaladress_textfield',
    'default_formatter' => 'text_plain', //TODO Add a proper formatter
  );

  return $fields;
}

/**
 * Implementation of hook_field_schema()
 */
function postaladdress_field_schema() {
  $columns = array(
    'country' => array(
      'description' => 'Two letter ISO country code of this address.',
      'type' => 'char',
      'length' => 2,
      'not null' => FALSE,
      'default' => '',
    ),
    'administrative_area' => array(
      'description' => 'The dministrative area of this address.',
      'type' => 'varchar',
      'length' => 255,
      'default' => '',
      'not null' => FALSE,
    ),
    'sub_administrative_area' => array(
      'description' => 'The sub administrative area of this address.',
      'type' => 'varchar',
      'length' => 255,
      'default' => '',
      'not null' => FALSE,
    ),
    'locality' => array(
      'description' => 'The locality of this address.',
      'type' => 'varchar',
      'length' => 255,
      'default' => '',
      'not null' => FALSE,
    ),
    'dependent_locality' => array(
      'description' => 'The dependent locality of this address.',
      'type' => 'varchar',
      'length' => 255,
      'default' => '',
      'not null' => FALSE,
    ),
    'postal_code' => array(
      'description' => 'The postal code of this address.',
      'type' => 'varchar',
      'length' => 255,
      'default' => '',
      'not null' => FALSE,
    ),
    'thoroughfare' => array(
      'description' => 'The thoroughfare of this address.',
      'type' => 'varchar',
      'length' => 255,
      'default' => '',
      'not null' => FALSE,
    ),
    'premise' => array(
      'description' => 'The premise of this address.',
      'type' => 'varchar',
      'length' => 255,
      'default' => '',
      'not null' => FALSE,
    ),
    'sub_premise' => array(
      'description' => 'The sub_premise of this address.',
      'type' => 'varchar',
      'length' => 255,
      'default' => '',
      'not null' => FALSE,
    ),
    'data' => array(
      'description' => 'Additional data for this address.',
      'type' => 'text',
      'size' => 'big',
      'not null' => FALSE,
      'serialize' => TRUE,
    ),
  );

  return array(
    'columns' => $columns,
    //TODO Add indexes
  );
}

/**
 * Implementation of hook_widget_info()
 */
function postaladdress_field_widget_info() {
  $widgets = array();

  $widgets['postaladdress_textfield'] = array(
    'label' => t('Address Textfield'),
    'field types' => array('postaladdress'),
  );

  return $widgets;
}

/**
 * Implementation of hook_field_widget_form()
 */
function postaladdress_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $country = isset($items[$delta]['country']) ? $items[$delta]['value'] : '';

  $element['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => country_get_list(),
    '#required' => true,
    '#default_value' => $country,
  );
  
  if (empty($country)) {
    // Select the country
  }
  else {
   // Provide the default
  }
  $element += postaladdress_edit_form($items, $delta);

  return $element;
}

/** 
 * Implemenation of hook_field_widget_settings_form()
 */
function hook_field_widget_settings_form($field, $instance) {
  $widget = instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'postalfield') {
    $form['countries'] = array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#title' => t('Select the available countries'),
      '#options' => countries_get_list(),
      '#default_value' => $settings['countries'],
    );
  }
  return $form;
}
/**
 * Implementation of hook_field_is_empty() //TODO
 */
function postaladdress_field_is_empty($item, $field) {
  if (empty($item['value']) && (string)$item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}
